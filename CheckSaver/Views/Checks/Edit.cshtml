@model CheckSaverCore.DataModels.Check
@{
    ViewBag.Title = "Редактировать чек";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <div class="form-horizontal col-xs-12 col-sm-12 col-md-10 col-lg-8 col-md-offset-1 col-lg-offset-2 card card-big card-big-full-bordered">
        <div class="card-big-title">
            <div class="main-title">Изменение чека за @Model.Date.ToShortDateString()</div>
            <div class="sub-title">@*Some text here*@</div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StoreId, "Магазин", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StoreId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StoreId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NeighbourId, "Кто платил", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("NeighborId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.NeighbourId, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div role="form" class="input_fields_wrap">

            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 card card-big">
                <div class="col-xs-3">
                    @Html.Label("Продукт")
                </div>
                <div class="col-xs-2">
                    @Html.Label("Количество / Вес")
                </div>
                <div class="col-xs-2">
                    @Html.Label("Цена")
                </div>
                <div class=" col-xs-5">
                    @Html.Label("Кто использует")
                </div>
            </div>
            @{
                int x = 0;
            }

            @foreach (var purchase in Model.Purchases)
            {
                ViewData["number"] = x;
                Html.RenderPartial("EditProductBox", purchase, ViewData);
                x++;
            }
        </div>

        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="row">
                <hr />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-3 ">
                <input type="submit" value="Сохранить изменения" class="card-flat-button delete-button" />
                <input type="button" value="Отмена" class="card-flat-button" onclick="location.href='@Url.Action("Index")'" />
            </div>
        </div>
    </div>
}

<div class="round-button">
    <div class="add_field_button round-button-circle">+</div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryuobt")
    <script src="~/Scripts/AddFieldsScript.js" type="text/javascript"></script>

    <script>

        $(function () {
            console.log("ready!");
            console.log(autocompleteFirst());
            AddNewEditFields();

        });
    </script>
}
